Name: Rebecca Lassman
How to compile:
How to run:
Known bugs/limitations: none
Discussion: My peekTopN method first copies every candidate in the underlying ArrayList of the heap into another ArrayList so that the heap will not be modified. It then uses Java’s sort method to sort the ArrayList from highest polling percentage to lowest. Finally, it copies the first n candidates into a new ArrayList and returns it. If there is a tie and multiple candidates have the same polling percentage, they are all added to the new ArrayList. For example, if n = 2 and there are two candidates tied for the highest percentage, the ArrayList returned would contain those two candidates plus the next highest candidate. My implementation of peekTopN has a complexity of O(nlogn) where n is the number of candidates in the heap. This is because Java’s sort algorithm has a complexity of O(nlogn), which is larger than the two loops, which each have a complexity of O(n). There are more efficient implementations of peekTopN which would probably use the fact that the heap is already somewhat sorted and that only the top n elements need to be found to lower the run time, but I did not have time to figure out how to implement this.
Extra Credit: I implemented the first extra credit option, which checks if candidates are tied. As I explained above, if two or more candidates have the same polling percentage, they are all considered the Nth best candidate. Also, when the top N candidates are printed, tied candidates are printed on the same line.
