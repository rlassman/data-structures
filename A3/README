Name: Rebecca Lassman
How to compile:
How to run:
Known bugs and limitations: none
Write-up: My Name class has three instance variables: name, which stores the name (i.e. Mary), rank, which stores the name’s position in the DLL, which is sorted alphabetically, and years, an ArrayList of year objects. Each year object contains the numerical year (i.e. 1990), a name’s rank based on the number of babies with that name, and the number of babies with that name that year. The DLL is created and manipulated in the NameDLL class. When a line from the data file is read using NameDLL’s readNames method, first a name object is created, which contains just the name from that line. Then a year object is created, which contains the rank and number of babies from that line. The year is then added to the new name or to the name’s ArrayList of years if that name is already in the DLL. If it is a new name, it is added to the DLL using the insertSorted method, which goes through the DLL and compares each name to the new name alphabetically. Since every new name is added this way, the list is always alphabetically sorted. readNames() also updates the instance variable yearlyTotal, which stores the total number of babies in a file by adding up each name’s number of babies. This is used to calculate the yearly percentages in Main, which has an ArrayList to store all the yearly totals for each file (yearTotals). The year’s number of babies is divided by the year’s yearly total to calculate the yearly percentage. For the total statistics, the Name class has a method called nameTotal that adds together all of the year’s numbers of babies to calculate the total number of babies with that name for all files. To calculate the total number of babies for all names for all files, Main adds together all the yearly totals in the yearTotals ArrayList. The value returned by nameTotal is divided by the total number of babies to calculate the overall percentage. Total rank is computed for a name using the totalRank method in NameDLL. The name’s rank is initialized to one, then the name’s total number of babies is compared to every name in the DLL’s total number of babies. If the other name’s number of babies is larger than name’s, one is added to rank. By the end of the loop, the name’s overall rank is known and returned.
